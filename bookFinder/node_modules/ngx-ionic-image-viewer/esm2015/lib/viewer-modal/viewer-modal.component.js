/**
 * @fileoverview added by tsickle
 * Generated from: lib/viewer-modal/viewer-modal.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { ModalController, IonSlides } from '@ionic/angular';
export class ViewerModalComponent {
    /**
     * @param {?} modalController
     */
    constructor(modalController) {
        this.modalController = modalController;
        // tslint:disable: no-inferrable-types
        this.alt = '';
        this.scheme = 'auto';
        this.slideOptions = {};
        this.srcFallback = '';
        this.srcHighRes = '';
        this.swipeToClose = true;
        this.text = '';
        this.title = '';
        this.titleSize = '';
        // tslint:enable: no-inferrable-types
        this.defaultSlideOptions = {
            centeredSlides: true,
            passiveListeners: false,
            zoom: {
                enabled: true
            }
        };
        this.options = {};
        this.swipeState = {
            phase: 'init',
            direction: 'none',
            swipeType: 'none',
            startX: 0,
            startY: 0,
            distance: 0,
            distanceX: 0,
            distanceY: 0,
            threshold: 150,
            // required min distance traveled to be considered swipe
            restraint: 100,
            // maximum distance allowed at the same time in perpendicular direction
            allowedTime: 500,
            // maximum time allowed to travel that distance
            elapsedTime: 0,
            startTime: 0
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.options = Object.assign({}, this.defaultSlideOptions, this.slideOptions);
            this.src = this.srcHighRes || this.src;
            this.setStyle();
            this.setScheme(this.scheme);
            this.initSwipeToClose(this.swipeToClose);
            /**
             * Current Workaround
             * See reported bug: https://github.com/ionic-team/ionic/issues/19638#issuecomment-584828315
             * Hint: Comment in '<ion-slide>' in component
             * @type {?}
             */
            const swiper = yield this.slides.getSwiper();
            swiper.appendSlide(`<ion-slide><img alt="${this.alt}" src="${this.src}" (error)="(onError($event))"/></ion-slide>`);
        });
    }
    /**
     * @return {?}
     */
    setStyle() {
        /** @type {?} */
        const el = document.querySelector('.ion-img-viewer');
        el.style.setProperty('--height', '100%');
        el.style.setProperty('--width', '100%');
        el.style.setProperty('--border-radius', '0');
    }
    /**
     * @param {?} scheme
     * @return {?}
     */
    setScheme(scheme) {
        if (scheme === 'auto') {
            return;
        }
        /** @type {?} */
        const el = document.querySelector('.ion-img-viewer');
        if (this.scheme === 'light') {
            el.style.setProperty('--ion-background-color', '#ffffff');
            el.style.setProperty('--ion-background-color-rgb', '255, 255, 255');
            el.style.setProperty('--ion-text-color', '#000');
            el.style.setProperty('--ion-text-color-rgb', '0,0,0');
        }
        if (this.scheme === 'dark') {
            if (el.classList.contains('ios')) {
                el.style.setProperty('--ion-background-color', '#000000');
                el.style.setProperty('--ion-background-color-rgb', '0, 0, 0');
            }
            else {
                el.style.setProperty('--ion-background-color', '#121212');
                el.style.setProperty('--ion-background-color-rgb', '18,18,18');
            }
            el.style.setProperty('--ion-text-color', '#ffffff');
            el.style.setProperty('--ion-text-color-rgb', '255,255,255');
        }
    }
    /**
     * @see http://www.javascriptkit.com/javatutors/touchevents3.shtml
     * @param {?=} isActive
     * @return {?}
     */
    initSwipeToClose(isActive = true) {
        if (!isActive) {
            return;
        }
        /** @type {?} */
        const el = document.querySelector('ion-modal');
        el.addEventListener('mousedown', (/**
         * @param {?} event
         * @return {?}
         */
        event => this.swipeStart(event)), true);
        el.addEventListener('mousemove', (/**
         * @param {?} event
         * @return {?}
         */
        event => this.swipeMove(event)), true);
        el.addEventListener('mouseup', (/**
         * @param {?} event
         * @return {?}
         */
        event => this.swipeEnd(event)), true);
        el.addEventListener('touchstart', (/**
         * @param {?} event
         * @return {?}
         */
        event => this.swipeStart(event)), true);
        el.addEventListener('touchmove', (/**
         * @param {?} event
         * @return {?}
         */
        event => this.swipeMove(event)), true);
        el.addEventListener('touchend', (/**
         * @param {?} event
         * @return {?}
         */
        event => this.swipeEnd(event)), true);
        this.modalController.getTop().then((/**
         * @param {?} modal
         * @return {?}
         */
        modal => {
            modal.onWillDismiss().then((/**
             * @return {?}
             */
            () => {
                document.removeEventListener('mousedown', this.swipeStart, true);
                document.removeEventListener('mousemove', this.swipeMove, true);
                document.removeEventListener('mouseup', this.swipeMove, true);
                document.removeEventListener('touchstart', this.swipeStart, true);
                document.removeEventListener('touchmove', this.swipeMove, true);
                document.removeEventListener('touchend', this.swipeMove, true);
            }));
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    swipeStart(event) {
        const { pageX, pageY } = event.type === 'touchstart' ? event.changedTouches[0] : event;
        this.swipeState = Object.assign({}, this.swipeState, { phase: 'start', direction: 'none', distance: 0, startX: pageX, startY: pageY, startTime: new Date().getTime() });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    swipeMove(event) {
        if (this.swipeState.phase === 'none') {
            return;
        }
        const { pageX, pageY } = event.type === 'touchmove' ? event.changedTouches[0] : event;
        // get horizontal dist traveled by finger while in contact with surface
        /** @type {?} */
        const distanceX = pageX - this.swipeState.startX;
        // get vertical dist traveled by finger while in contact with surface
        /** @type {?} */
        const distanceY = pageY - this.swipeState.startY;
        /** @type {?} */
        let direction;
        /** @type {?} */
        let distance;
        if (Math.abs(distanceX) > Math.abs(distanceY)) {
            // if distance traveled horizontally is greater than vertically, consider this a horizontal swipe
            direction = distanceX < 0 ? 'left' : 'right';
            distance = distanceX;
        }
        else {
            // else consider this a vertical swipe
            direction = distanceY < 0 ? 'up' : 'down';
            distance = distanceY;
        }
        this.swipeState = Object.assign({}, this.swipeState, { phase: 'move', direction,
            distance,
            distanceX,
            distanceY });
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    swipeEnd(event) {
        if (this.swipeState.phase === 'none') {
            return;
        }
        const { allowedTime, direction, restraint, startTime, threshold, distanceX, distanceY } = this.swipeState;
        /** @type {?} */
        let swipeType;
        /** @type {?} */
        const elapsedTime = new Date().getTime() - startTime;
        if (elapsedTime <= allowedTime) {
            // first condition for a swipe met
            if (Math.abs(distanceX) >= threshold && Math.abs(distanceY) <= restraint) {
                // 2nd condition for horizontal swipe met
                swipeType = direction; // set swipeType to either "left" or "right"
            }
            else if (Math.abs(distanceY) >= threshold && Math.abs(distanceX) <= restraint) {
                // 2nd condition for vertical swipe met
                swipeType = direction; // set swipeType to either "top" or "down"
            }
        }
        this.swipeState = Object.assign({}, this.swipeState, { phase: 'end', swipeType });
        if (swipeType === 'down') {
            return this.closeModal();
        }
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onError(error) {
        if (this.srcFallback) {
            this.src = this.srcFallback;
        }
    }
    /**
     * @return {?}
     */
    closeModal() {
        this.modalController.dismiss();
    }
}
ViewerModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'ion-viewer-modal',
                template: "<ion-header [ngClass]=\"{ 'no-title': title.length <= 0 }\">\n  <ion-toolbar>\n    <ion-buttons slot=\"primary\">\n      <ion-button (click)=\"closeModal()\">\n        <ion-icon slot=\"icon-only\" name=\"close\"></ion-icon>\n      </ion-button>\n    </ion-buttons>\n    <ion-title [size]=\"titleSize\">{{ title }}</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content [forceOverscroll]=\"false\">\n  <ion-slides [options]=\"options\" #sliderRef>\n    <!-- <ion-slide>\n      <div class=\"swiper-zoom-container\">\n        <img [alt]=\"this.alt\" [src]=\"this.src\" (error)=\"onError($event)\" />\n      </div>\n    </ion-slide> -->\n  </ion-slides>\n</ion-content>\n\n<ion-footer [ngClass]=\"{ 'no-text': text.length <= 0 }\">\n  <ion-toolbar class=\"ion-text-center\">\n    <ion-text>{{ text }}</ion-text>\n  </ion-toolbar>\n</ion-footer>\n",
                styles: ["ion-slides{--height:100%;height:100%}ion-toolbar{--border-style:none;--background:rgba(var(--ion-background-color-rgb, (255, 255, 255)), 0.6);background:rgba(var(--ion-background-color-rgb,255,255,255),.6)}ion-header{opacity:1;position:absolute}ion-header.no-title:after{content:none}ion-header.no-title ion-toolbar{--background:rgba(0, 0, 0, 0);background:rgba(0,0,0,0)}ion-footer{position:absolute;bottom:0}ion-footer.no-text:before{content:none}ion-footer.no-text ion-toolbar{--background:rgba(0, 0, 0, 0);background:rgba(0,0,0,0)}"]
            }] }
];
/** @nocollapse */
ViewerModalComponent.ctorParameters = () => [
    { type: ModalController }
];
ViewerModalComponent.propDecorators = {
    alt: [{ type: Input }],
    scheme: [{ type: Input }],
    slideOptions: [{ type: Input }],
    src: [{ type: Input }],
    srcFallback: [{ type: Input }],
    srcHighRes: [{ type: Input }],
    swipeToClose: [{ type: Input }],
    text: [{ type: Input }],
    title: [{ type: Input }],
    titleSize: [{ type: Input }],
    slides: [{ type: ViewChild, args: ['sliderRef', { static: true },] }]
};
if (false) {
    /** @type {?} */
    ViewerModalComponent.prototype.alt;
    /** @type {?} */
    ViewerModalComponent.prototype.scheme;
    /** @type {?} */
    ViewerModalComponent.prototype.slideOptions;
    /** @type {?} */
    ViewerModalComponent.prototype.src;
    /** @type {?} */
    ViewerModalComponent.prototype.srcFallback;
    /** @type {?} */
    ViewerModalComponent.prototype.srcHighRes;
    /** @type {?} */
    ViewerModalComponent.prototype.swipeToClose;
    /** @type {?} */
    ViewerModalComponent.prototype.text;
    /** @type {?} */
    ViewerModalComponent.prototype.title;
    /** @type {?} */
    ViewerModalComponent.prototype.titleSize;
    /** @type {?} */
    ViewerModalComponent.prototype.defaultSlideOptions;
    /** @type {?} */
    ViewerModalComponent.prototype.options;
    /** @type {?} */
    ViewerModalComponent.prototype.swipeState;
    /** @type {?} */
    ViewerModalComponent.prototype.slides;
    /**
     * @type {?}
     * @private
     */
    ViewerModalComponent.prototype.modalController;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld2VyLW1vZGFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pb25pYy1pbWFnZS12aWV3ZXIvIiwic291cmNlcyI6WyJsaWIvdmlld2VyLW1vZGFsL3ZpZXdlci1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFPNUQsTUFBTSxPQUFPLG9CQUFvQjs7OztJQTBDL0IsWUFBb0IsZUFBZ0M7UUFBaEMsb0JBQWUsR0FBZixlQUFlLENBQWlCOztRQXhDM0MsUUFBRyxHQUFZLEVBQUUsQ0FBQztRQUNsQixXQUFNLEdBQVksTUFBTSxDQUFDO1FBQ3pCLGlCQUFZLEdBQVksRUFBRSxDQUFDO1FBRTNCLGdCQUFXLEdBQVksRUFBRSxDQUFDO1FBQzFCLGVBQVUsR0FBWSxFQUFFLENBQUM7UUFDekIsaUJBQVksR0FBYSxJQUFJLENBQUM7UUFDOUIsU0FBSSxHQUFZLEVBQUUsQ0FBQztRQUNuQixVQUFLLEdBQVksRUFBRSxDQUFDO1FBQ3BCLGNBQVMsR0FBWSxFQUFFLENBQUM7O1FBR2pDLHdCQUFtQixHQUFHO1lBQ3BCLGNBQWMsRUFBRSxJQUFJO1lBQ3BCLGdCQUFnQixFQUFFLEtBQUs7WUFDdkIsSUFBSSxFQUFFO2dCQUNKLE9BQU8sRUFBRSxJQUFJO2FBQ2Q7U0FDRixDQUFDO1FBRUYsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUViLGVBQVUsR0FBRztZQUNYLEtBQUssRUFBRSxNQUFNO1lBQ2IsU0FBUyxFQUFFLE1BQU07WUFDakIsU0FBUyxFQUFFLE1BQU07WUFDakIsTUFBTSxFQUFFLENBQUM7WUFDVCxNQUFNLEVBQUUsQ0FBQztZQUNULFFBQVEsRUFBRSxDQUFDO1lBQ1gsU0FBUyxFQUFFLENBQUM7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OztZQU5RLGVBQWU7OztrQkFTckIsS0FBSztxQkFDTCxLQUFLOzJCQUNMLEtBQUs7a0JBQ0wsS0FBSzswQkFDTCxLQUFLO3lCQUNMLEtBQUs7MkJBQ0wsS0FBSzttQkFDTCxLQUFLO29CQUNMLEtBQUs7d0JBQ0wsS0FBSztxQkE2QkwsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7Ozs7SUF0Q3hDLG1DQUEyQjs7SUFDM0Isc0NBQWtDOztJQUNsQyw0Q0FBb0M7O0lBQ3BDLG1DQUFxQjs7SUFDckIsMkNBQW1DOztJQUNuQywwQ0FBa0M7O0lBQ2xDLDRDQUF1Qzs7SUFDdkMsb0NBQTRCOztJQUM1QixxQ0FBNkI7O0lBQzdCLHlDQUFpQzs7SUFHakMsbURBTUU7O0lBRUYsdUNBQWE7O0lBRWIsMENBY0U7O0lBRUYsc0NBQTREOzs7OztJQUVoRCwrQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9kYWxDb250cm9sbGVyLCBJb25TbGlkZXMgfSBmcm9tICdAaW9uaWMvYW5ndWxhcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2lvbi12aWV3ZXItbW9kYWwnLFxuICB0ZW1wbGF0ZVVybDogJy4vdmlld2VyLW1vZGFsLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdmlld2VyLW1vZGFsLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgVmlld2VyTW9kYWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZTogbm8taW5mZXJyYWJsZS10eXBlc1xuICBASW5wdXQoKSBhbHQ/OiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgc2NoZW1lPzogc3RyaW5nID0gJ2F1dG8nO1xuICBASW5wdXQoKSBzbGlkZU9wdGlvbnM/OiBvYmplY3QgPSB7fTtcbiAgQElucHV0KCkgc3JjOiBzdHJpbmc7XG4gIEBJbnB1dCgpIHNyY0ZhbGxiYWNrPzogc3RyaW5nID0gJyc7XG4gIEBJbnB1dCgpIHNyY0hpZ2hSZXM/OiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgc3dpcGVUb0Nsb3NlPzogYm9vbGVhbiA9IHRydWU7XG4gIEBJbnB1dCgpIHRleHQ/OiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgdGl0bGU/OiBzdHJpbmcgPSAnJztcbiAgQElucHV0KCkgdGl0bGVTaXplPzogc3RyaW5nID0gJyc7XG4gIC8vIHRzbGludDplbmFibGU6IG5vLWluZmVycmFibGUtdHlwZXNcblxuICBkZWZhdWx0U2xpZGVPcHRpb25zID0ge1xuICAgIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxuICAgIHBhc3NpdmVMaXN0ZW5lcnM6IGZhbHNlLFxuICAgIHpvb206IHtcbiAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICB9XG4gIH07XG5cbiAgb3B0aW9ucyA9IHt9O1xuXG4gIHN3aXBlU3RhdGUgPSB7XG4gICAgcGhhc2U6ICdpbml0JyxcbiAgICBkaXJlY3Rpb246ICdub25lJyxcbiAgICBzd2lwZVR5cGU6ICdub25lJyxcbiAgICBzdGFydFg6IDAsXG4gICAgc3RhcnRZOiAwLFxuICAgIGRpc3RhbmNlOiAwLFxuICAgIGRpc3RhbmNlWDogMCxcbiAgICBkaXN0YW5jZVk6IDAsXG4gICAgdGhyZXNob2xkOiAxNTAsIC8vIHJlcXVpcmVkIG1pbiBkaXN0YW5jZSB0cmF2ZWxlZCB0byBiZSBjb25zaWRlcmVkIHN3aXBlXG4gICAgcmVzdHJhaW50OiAxMDAsIC8vIG1heGltdW0gZGlzdGFuY2UgYWxsb3dlZCBhdCB0aGUgc2FtZSB0aW1lIGluIHBlcnBlbmRpY3VsYXIgZGlyZWN0aW9uXG4gICAgYWxsb3dlZFRpbWU6IDUwMCwgLy8gbWF4aW11bSB0aW1lIGFsbG93ZWQgdG8gdHJhdmVsIHRoYXQgZGlzdGFuY2VcbiAgICBlbGFwc2VkVGltZTogMCxcbiAgICBzdGFydFRpbWU6IDBcbiAgfTtcblxuICBAVmlld0NoaWxkKCdzbGlkZXJSZWYnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzbGlkZXM6IElvblNsaWRlcztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsQ29udHJvbGxlcjogTW9kYWxDb250cm9sbGVyKSB7fVxuXG4gIGFzeW5jIG5nT25Jbml0KCkge1xuICAgIHRoaXMub3B0aW9ucyA9IHsgLi4udGhpcy5kZWZhdWx0U2xpZGVPcHRpb25zLCAuLi50aGlzLnNsaWRlT3B0aW9ucyB9O1xuICAgIHRoaXMuc3JjID0gdGhpcy5zcmNIaWdoUmVzIHx8IHRoaXMuc3JjO1xuICAgIHRoaXMuc2V0U3R5bGUoKTtcbiAgICB0aGlzLnNldFNjaGVtZSh0aGlzLnNjaGVtZSk7XG4gICAgdGhpcy5pbml0U3dpcGVUb0Nsb3NlKHRoaXMuc3dpcGVUb0Nsb3NlKTtcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgV29ya2Fyb3VuZFxuICAgICAqIFNlZSByZXBvcnRlZCBidWc6IGh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljL2lzc3Vlcy8xOTYzOCNpc3N1ZWNvbW1lbnQtNTg0ODI4MzE1XG4gICAgICogSGludDogQ29tbWVudCBpbiAnPGlvbi1zbGlkZT4nIGluIGNvbXBvbmVudFxuICAgICAqL1xuICAgIGNvbnN0IHN3aXBlciA9IGF3YWl0IHRoaXMuc2xpZGVzLmdldFN3aXBlcigpO1xuICAgIHN3aXBlci5hcHBlbmRTbGlkZShgPGlvbi1zbGlkZT48aW1nIGFsdD1cIiR7dGhpcy5hbHR9XCIgc3JjPVwiJHt0aGlzLnNyY31cIiAoZXJyb3IpPVwiKG9uRXJyb3IoJGV2ZW50KSlcIi8+PC9pb24tc2xpZGU+YCk7XG4gIH1cblxuICBzZXRTdHlsZSgpIHtcbiAgICBjb25zdCBlbDogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW9uLWltZy12aWV3ZXInKTtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1oZWlnaHQnLCAnMTAwJScpO1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCctLXdpZHRoJywgJzEwMCUnKTtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ib3JkZXItcmFkaXVzJywgJzAnKTtcbiAgfVxuXG4gIHNldFNjaGVtZShzY2hlbWU6IHN0cmluZykge1xuICAgIGlmIChzY2hlbWUgPT09ICdhdXRvJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGVsOiBIVE1MRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pb24taW1nLXZpZXdlcicpO1xuXG4gICAgaWYgKHRoaXMuc2NoZW1lID09PSAnbGlnaHQnKSB7XG4gICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1pb24tYmFja2dyb3VuZC1jb2xvcicsICcjZmZmZmZmJyk7XG4gICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1pb24tYmFja2dyb3VuZC1jb2xvci1yZ2InLCAnMjU1LCAyNTUsIDI1NScpO1xuICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0taW9uLXRleHQtY29sb3InLCAnIzAwMCcpO1xuICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0taW9uLXRleHQtY29sb3ItcmdiJywgJzAsMCwwJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2NoZW1lID09PSAnZGFyaycpIHtcbiAgICAgIGlmIChlbC5jbGFzc0xpc3QuY29udGFpbnMoJ2lvcycpKSB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCctLWlvbi1iYWNrZ3JvdW5kLWNvbG9yJywgJyMwMDAwMDAnKTtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0taW9uLWJhY2tncm91bmQtY29sb3ItcmdiJywgJzAsIDAsIDAnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KCctLWlvbi1iYWNrZ3JvdW5kLWNvbG9yJywgJyMxMjEyMTInKTtcbiAgICAgICAgZWwuc3R5bGUuc2V0UHJvcGVydHkoJy0taW9uLWJhY2tncm91bmQtY29sb3ItcmdiJywgJzE4LDE4LDE4Jyk7XG4gICAgICB9XG4gICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1pb24tdGV4dC1jb2xvcicsICcjZmZmZmZmJyk7XG4gICAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1pb24tdGV4dC1jb2xvci1yZ2InLCAnMjU1LDI1NSwyNTUnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHNlZSBodHRwOi8vd3d3LmphdmFzY3JpcHRraXQuY29tL2phdmF0dXRvcnMvdG91Y2hldmVudHMzLnNodG1sXG4gICAqL1xuICBpbml0U3dpcGVUb0Nsb3NlKGlzQWN0aXZlOiBib29sZWFuID0gdHJ1ZSkge1xuICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1tb2RhbCcpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50ID0+IHRoaXMuc3dpcGVTdGFydChldmVudCksIHRydWUpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGV2ZW50ID0+IHRoaXMuc3dpcGVNb3ZlKGV2ZW50KSwgdHJ1ZSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGV2ZW50ID0+IHRoaXMuc3dpcGVFbmQoZXZlbnQpLCB0cnVlKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZXZlbnQgPT4gdGhpcy5zd2lwZVN0YXJ0KGV2ZW50KSwgdHJ1ZSk7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgZXZlbnQgPT4gdGhpcy5zd2lwZU1vdmUoZXZlbnQpLCB0cnVlKTtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGV2ZW50ID0+IHRoaXMuc3dpcGVFbmQoZXZlbnQpLCB0cnVlKTtcblxuICAgIHRoaXMubW9kYWxDb250cm9sbGVyLmdldFRvcCgpLnRoZW4obW9kYWwgPT4ge1xuICAgICAgbW9kYWwub25XaWxsRGlzbWlzcygpLnRoZW4oKCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnN3aXBlU3RhcnQsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLnN3aXBlTW92ZSwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLnN3aXBlTW92ZSwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLnN3aXBlU3RhcnQsIHRydWUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLnN3aXBlTW92ZSwgdHJ1ZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5zd2lwZU1vdmUsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBzd2lwZVN0YXJ0KGV2ZW50KSB7XG4gICAgY29uc3QgeyBwYWdlWCwgcGFnZVkgfSA9IGV2ZW50LnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogZXZlbnQ7XG5cbiAgICB0aGlzLnN3aXBlU3RhdGUgPSB7XG4gICAgICAuLi50aGlzLnN3aXBlU3RhdGUsXG4gICAgICBwaGFzZTogJ3N0YXJ0JyxcbiAgICAgIGRpcmVjdGlvbjogJ25vbmUnLFxuICAgICAgZGlzdGFuY2U6IDAsXG4gICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgIHN0YXJ0VGltZTogbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICB9O1xuICB9XG5cbiAgc3dpcGVNb3ZlKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuc3dpcGVTdGF0ZS5waGFzZSA9PT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgcGFnZVgsIHBhZ2VZIH0gPSBldmVudC50eXBlID09PSAndG91Y2htb3ZlJyA/IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdIDogZXZlbnQ7XG4gICAgLy8gZ2V0IGhvcml6b250YWwgZGlzdCB0cmF2ZWxlZCBieSBmaW5nZXIgd2hpbGUgaW4gY29udGFjdCB3aXRoIHN1cmZhY2VcbiAgICBjb25zdCBkaXN0YW5jZVggPSBwYWdlWCAtIHRoaXMuc3dpcGVTdGF0ZS5zdGFydFg7XG4gICAgLy8gZ2V0IHZlcnRpY2FsIGRpc3QgdHJhdmVsZWQgYnkgZmluZ2VyIHdoaWxlIGluIGNvbnRhY3Qgd2l0aCBzdXJmYWNlXG4gICAgY29uc3QgZGlzdGFuY2VZID0gcGFnZVkgLSB0aGlzLnN3aXBlU3RhdGUuc3RhcnRZO1xuICAgIGxldCBkaXJlY3Rpb247XG4gICAgbGV0IGRpc3RhbmNlO1xuXG4gICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlWCkgPiBNYXRoLmFicyhkaXN0YW5jZVkpKSB7XG4gICAgICAvLyBpZiBkaXN0YW5jZSB0cmF2ZWxlZCBob3Jpem9udGFsbHkgaXMgZ3JlYXRlciB0aGFuIHZlcnRpY2FsbHksIGNvbnNpZGVyIHRoaXMgYSBob3Jpem9udGFsIHN3aXBlXG4gICAgICBkaXJlY3Rpb24gPSBkaXN0YW5jZVggPCAwID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgIGRpc3RhbmNlID0gZGlzdGFuY2VYO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbHNlIGNvbnNpZGVyIHRoaXMgYSB2ZXJ0aWNhbCBzd2lwZVxuICAgICAgZGlyZWN0aW9uID0gZGlzdGFuY2VZIDwgMCA/ICd1cCcgOiAnZG93bic7XG4gICAgICBkaXN0YW5jZSA9IGRpc3RhbmNlWTtcbiAgICB9XG4gICAgdGhpcy5zd2lwZVN0YXRlID0ge1xuICAgICAgLi4udGhpcy5zd2lwZVN0YXRlLFxuICAgICAgcGhhc2U6ICdtb3ZlJyxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIGRpc3RhbmNlLFxuICAgICAgZGlzdGFuY2VYLFxuICAgICAgZGlzdGFuY2VZXG4gICAgfTtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgc3dpcGVFbmQoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5zd2lwZVN0YXRlLnBoYXNlID09PSAnbm9uZScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBhbGxvd2VkVGltZSwgZGlyZWN0aW9uLCByZXN0cmFpbnQsIHN0YXJ0VGltZSwgdGhyZXNob2xkLCBkaXN0YW5jZVgsIGRpc3RhbmNlWSB9ID0gdGhpcy5zd2lwZVN0YXRlO1xuICAgIGxldCBzd2lwZVR5cGU7XG5cbiAgICBjb25zdCBlbGFwc2VkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gc3RhcnRUaW1lOyAvLyBnZXQgdGltZSBlbGFwc2VkXG4gICAgaWYgKGVsYXBzZWRUaW1lIDw9IGFsbG93ZWRUaW1lKSB7XG4gICAgICAvLyBmaXJzdCBjb25kaXRpb24gZm9yIGEgc3dpcGUgbWV0XG4gICAgICBpZiAoTWF0aC5hYnMoZGlzdGFuY2VYKSA+PSB0aHJlc2hvbGQgJiYgTWF0aC5hYnMoZGlzdGFuY2VZKSA8PSByZXN0cmFpbnQpIHtcbiAgICAgICAgLy8gMm5kIGNvbmRpdGlvbiBmb3IgaG9yaXpvbnRhbCBzd2lwZSBtZXRcbiAgICAgICAgc3dpcGVUeXBlID0gZGlyZWN0aW9uOyAvLyBzZXQgc3dpcGVUeXBlIHRvIGVpdGhlciBcImxlZnRcIiBvciBcInJpZ2h0XCJcbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGlzdGFuY2VZKSA+PSB0aHJlc2hvbGQgJiYgTWF0aC5hYnMoZGlzdGFuY2VYKSA8PSByZXN0cmFpbnQpIHtcbiAgICAgICAgLy8gMm5kIGNvbmRpdGlvbiBmb3IgdmVydGljYWwgc3dpcGUgbWV0XG4gICAgICAgIHN3aXBlVHlwZSA9IGRpcmVjdGlvbjsgLy8gc2V0IHN3aXBlVHlwZSB0byBlaXRoZXIgXCJ0b3BcIiBvciBcImRvd25cIlxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc3dpcGVTdGF0ZSA9IHtcbiAgICAgIC4uLnRoaXMuc3dpcGVTdGF0ZSxcbiAgICAgIHBoYXNlOiAnZW5kJyxcbiAgICAgIHN3aXBlVHlwZVxuICAgIH07XG5cbiAgICBpZiAoc3dpcGVUeXBlID09PSAnZG93bicpIHtcbiAgICAgIHJldHVybiB0aGlzLmNsb3NlTW9kYWwoKTtcbiAgICB9XG4gIH1cblxuICBvbkVycm9yKGVycm9yKSB7XG4gICAgaWYgKHRoaXMuc3JjRmFsbGJhY2spIHtcbiAgICAgIHRoaXMuc3JjID0gdGhpcy5zcmNGYWxsYmFjaztcbiAgICB9XG4gIH1cblxuICBjbG9zZU1vZGFsKCkge1xuICAgIHRoaXMubW9kYWxDb250cm9sbGVyLmRpc21pc3MoKTtcbiAgfVxufVxuIl19